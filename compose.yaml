services:
  eqproxy-io:
    build:
      context: .
      dockerfile: ./server/eqproxy-io/Dockerfile
      args:
        NODE_VERSION: 20.11.1
    env_file:
      - .env
    environment:
      - TZ=Asia/Tokyo
      - PORT=4000
    restart: always
    ports:
      # ws.api.eqmonitor.app
      - 4000:4000
      # Prometheus metrics
      - 4002:4002
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: "3"

  dmdata-proxy:
    build:
      context: .
      dockerfile: ./service/dmdata-proxy/Dockerfile
    env_file:
      - ./service/dmdata-proxy/.env
    environment:
      - TZ=Asia/Tokyo
      - WEBSOCKET_PORT=4020
      - NEW_RELIC_APP_NAME=dmdata-proxy
    restart: always
    ports:
      - 4020:4020
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4020/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  supabase-proxy:
    build: ./service/supabase-proxy
    env_file:
      - ./service/supabase-proxy/.env
    environment:
      - TZ=Asia/Tokyo
      - PORT=4010
    restart: always
    ports:
      - 4010:4010
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4010/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  telegram-proxy-server:
    build:
      context: .
      dockerfile: ./server/telegram-proxy-server/Dockerfile
    env_file:
      - ./server/telegram-proxy-server/.env
    environment:
      - TZ=Asia/Tokyo
      - PORT=4030
      - SUPABASE_PROXY_URL=ws://supabase-proxy:4010/ws
      - DMDATA_PROXY_URL=ws://dmdata-proxy:4020/ws
    restart: always
    depends_on:
      supabase-proxy:
        condition: service_healthy
      dmdata-proxy:
        condition: service_healthy
    ports:
      - 4030:4030
    logging:
      driver: json-file
      options:
        max-size: 1m
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "http://localhost:4030/health"]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 30s

  ######### 以下 Supabase 関連のサービス #########

  db:
    container_name: supabase-db
    build: ./db
    healthcheck:
      test: pg_isready -U postgres -h localhost
      interval: 5s
      timeout: 5s
      retries: 10
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
      - -c
      - log_min_messages=debug # prevents Realtime polling queries from appearing in logs
    restart: unless-stopped
    ports:
      # Pass down internal port because it's set dynamically by other services
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: ${POSTGRES_PORT}
      POSTGRES_PORT: ${POSTGRES_PORT}
      PGPASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATABASE: ${POSTGRES_DB}
      POSTGRES_DB: ${POSTGRES_DB}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXP: ${JWT_EXPIRY}
      POSTGRES_INITDB_ARGS: --locale=ja_JP.utf8
    volumes:
      # Must be superuser to alter reserved role
      - ./db/roles.sql:/docker-entrypoint-initdb.d/init-scripts/99-roles.sql:Z
      # PGDATA directory is persisted between restarts
      - ./db/data:/var/lib/postgresql/data:Z
      - ./db/init/data.sql:/docker-entrypoint-initdb.d/migrations/99-data.sql:Z
      # Use named volume to persist pgsodium decryption key between restarts
      - db-config:/etc/postgresql-custom
      - ./db/postgresql.conf:/etc/postgresql/postgresql.conf:Z

volumes:
  db-config:
