// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file gorush.proto (package proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message proto.Alert
 */
export class Alert extends Message<Alert> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  /**
   * @generated from field: string body = 2;
   */
  body = "";

  /**
   * @generated from field: string subtitle = 3;
   */
  subtitle = "";

  /**
   * @generated from field: string action = 4;
   */
  action = "";

  /**
   * @generated from field: string actionLocKey = 5;
   */
  actionLocKey = "";

  /**
   * @generated from field: string launchImage = 6;
   */
  launchImage = "";

  /**
   * @generated from field: string locKey = 7;
   */
  locKey = "";

  /**
   * @generated from field: string titleLocKey = 8;
   */
  titleLocKey = "";

  /**
   * @generated from field: repeated string locArgs = 9;
   */
  locArgs: string[] = [];

  /**
   * @generated from field: repeated string titleLocArgs = 10;
   */
  titleLocArgs: string[] = [];

  constructor(data?: PartialMessage<Alert>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.Alert";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "body", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "subtitle", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "action", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "actionLocKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "launchImage", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "locKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "titleLocKey", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "locArgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "titleLocArgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Alert {
    return new Alert().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Alert {
    return new Alert().fromJsonString(jsonString, options);
  }

  static equals(a: Alert | PlainMessage<Alert> | undefined, b: Alert | PlainMessage<Alert> | undefined): boolean {
    return proto3.util.equals(Alert, a, b);
  }
}

/**
 * @generated from message proto.NotificationRequest
 */
export class NotificationRequest extends Message<NotificationRequest> {
  /**
   * @generated from field: repeated string tokens = 1;
   */
  tokens: string[] = [];

  /**
   * @generated from field: int32 platform = 2;
   */
  platform = 0;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: string title = 4;
   */
  title = "";

  /**
   * @generated from field: string topic = 5;
   */
  topic = "";

  /**
   * @generated from field: string key = 6;
   */
  key = "";

  /**
   * @generated from field: int32 badge = 7;
   */
  badge = 0;

  /**
   * @generated from field: string category = 8;
   */
  category = "";

  /**
   * @generated from field: proto.Alert alert = 9;
   */
  alert?: Alert;

  /**
   * @generated from field: string sound = 10;
   */
  sound = "";

  /**
   * @generated from field: bool contentAvailable = 11;
   */
  contentAvailable = false;

  /**
   * @generated from field: string threadID = 12;
   */
  threadID = "";

  /**
   * @generated from field: bool mutableContent = 13;
   */
  mutableContent = false;

  /**
   * @generated from field: google.protobuf.Struct data = 14;
   */
  data?: Struct;

  /**
   * @generated from field: string image = 15;
   */
  image = "";

  /**
   * @generated from field: proto.NotificationRequest.Priority priority = 16;
   */
  priority = NotificationRequest_Priority.NORMAL;

  /**
   * @generated from field: string ID = 17;
   */
  ID = "";

  /**
   * @generated from field: string pushType = 18;
   */
  pushType = "";

  /**
   * default is production
   *
   * @generated from field: bool development = 19;
   */
  development = false;

  constructor(data?: PartialMessage<NotificationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.NotificationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "platform", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "topic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "badge", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "category", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "alert", kind: "message", T: Alert },
    { no: 10, name: "sound", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "contentAvailable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "threadID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "mutableContent", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "data", kind: "message", T: Struct },
    { no: 15, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "priority", kind: "enum", T: proto3.getEnumType(NotificationRequest_Priority) },
    { no: 17, name: "ID", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "pushType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "development", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationRequest {
    return new NotificationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationRequest {
    return new NotificationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationRequest {
    return new NotificationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationRequest | PlainMessage<NotificationRequest> | undefined, b: NotificationRequest | PlainMessage<NotificationRequest> | undefined): boolean {
    return proto3.util.equals(NotificationRequest, a, b);
  }
}

/**
 * @generated from enum proto.NotificationRequest.Priority
 */
export enum NotificationRequest_Priority {
  /**
   * @generated from enum value: NORMAL = 0;
   */
  NORMAL = 0,

  /**
   * @generated from enum value: HIGH = 1;
   */
  HIGH = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(NotificationRequest_Priority)
proto3.util.setEnumType(NotificationRequest_Priority, "proto.NotificationRequest.Priority", [
  { no: 0, name: "NORMAL" },
  { no: 1, name: "HIGH" },
]);

/**
 * @generated from message proto.NotificationReply
 */
export class NotificationReply extends Message<NotificationReply> {
  /**
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * @generated from field: int32 counts = 2;
   */
  counts = 0;

  constructor(data?: PartialMessage<NotificationReply>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.NotificationReply";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "counts", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NotificationReply {
    return new NotificationReply().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NotificationReply {
    return new NotificationReply().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NotificationReply {
    return new NotificationReply().fromJsonString(jsonString, options);
  }

  static equals(a: NotificationReply | PlainMessage<NotificationReply> | undefined, b: NotificationReply | PlainMessage<NotificationReply> | undefined): boolean {
    return proto3.util.equals(NotificationReply, a, b);
  }
}

/**
 * @generated from message proto.HealthCheckRequest
 */
export class HealthCheckRequest extends Message<HealthCheckRequest> {
  /**
   * @generated from field: string service = 1;
   */
  service = "";

  constructor(data?: PartialMessage<HealthCheckRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.HealthCheckRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "service", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckRequest {
    return new HealthCheckRequest().fromJsonString(jsonString, options);
  }

  static equals(a: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined, b: HealthCheckRequest | PlainMessage<HealthCheckRequest> | undefined): boolean {
    return proto3.util.equals(HealthCheckRequest, a, b);
  }
}

/**
 * @generated from message proto.HealthCheckResponse
 */
export class HealthCheckResponse extends Message<HealthCheckResponse> {
  /**
   * @generated from field: proto.HealthCheckResponse.ServingStatus status = 1;
   */
  status = HealthCheckResponse_ServingStatus.UNKNOWN;

  constructor(data?: PartialMessage<HealthCheckResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.HealthCheckResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(HealthCheckResponse_ServingStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HealthCheckResponse {
    return new HealthCheckResponse().fromJsonString(jsonString, options);
  }

  static equals(a: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined, b: HealthCheckResponse | PlainMessage<HealthCheckResponse> | undefined): boolean {
    return proto3.util.equals(HealthCheckResponse, a, b);
  }
}

/**
 * @generated from enum proto.HealthCheckResponse.ServingStatus
 */
export enum HealthCheckResponse_ServingStatus {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: SERVING = 1;
   */
  SERVING = 1,

  /**
   * @generated from enum value: NOT_SERVING = 2;
   */
  NOT_SERVING = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HealthCheckResponse_ServingStatus)
proto3.util.setEnumType(HealthCheckResponse_ServingStatus, "proto.HealthCheckResponse.ServingStatus", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "SERVING" },
  { no: 2, name: "NOT_SERVING" },
]);

